type Query {
  user(id: ID!): User!
  users: [User!]!
  post(id: ID!): Post!
  posts: [Post!]!
  comment(id: ID!): Comment!
  comments:[Comment!]!
}
type Mutation{
  createUser(input: createUserInput): User!
  updateUser(id: ID!, data: updateUserInput!): User!
  deleteUser(id: ID!): User!

  createPost(input: createPostInput): Post!
  updatePost(id: ID!,data: updatePostInput ): Post!
  deletePost(id: ID!): Post!

  createComment(input: createCommentInput): Comment!
  updateComment(id: ID!, data: createCommentInput): Comment!
  deleteComment(id: ID!): Comment!
}
type Subscription {
  count: Int!
  comment: ComentSubscriptionPayload!
  post: PostSubscriptionPayload!
}




input createUserInput {
  name:String!
  email: String!
  age:Int
}
input updateUserInput {
  name:String
  email: String
  age:Int
}
input createPostInput {
  title: String!
  body: String!
  published: Boolean
  author: String!
}
input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input createCommentInput{
  text: String!
  post: String!
  author: String!
}

type User{
  id: ID!
  name: String!
  email: String!
  posts:[Post!]!
  comments:[Comment!]
}
type Post{
  id: ID!
  title: String!
  body: String!
  published: Boolean
  author: User!
  comments: [Comment!]
}
type Comment{
  id: ID!
  text: String!
  author: User!
  post: Post!
}


type PostSubscriptionPayload {
  mutation: MutationType
  data: Post!
}

type ComentSubscriptionPayload {
  mutation: MutationType
  data: Comment!
}



enum MutationType {
  CREATED
  UPDATED
  DELETED
}